/*
device csv creation pre requests
================================
please use csv which is already generated by "Devices_Generate_csv_50k.js"
*/

const fs = require('fs');
const csv = require('csv-parser');
const createCsvWriter = require('csv-writer').createObjectCsvWriter;

// Input and output file paths
/* PLEASE UPDATE INPUT CSV FILE */
/* PLEASE UPDATE NAME OF OUTPUT CSV FILE */
const inputFile = './Device_Random_data_psrengg_10k.csv';
const outputFile = 'PASTASSIGNEES.csv';
/* ========================================================== */

function getCurrentDate() {
    const date = new Date();
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// Define column mappings for renaming headers
const columnMappings = {
    'Asset Number': 'Asset Number',
    "Assigned User's ID": 'User ID',
    "Assigned User's Email": 'Email',
    'Start Date': 'Start Date',
    'End Date': 'End Date'
};


// Column to update and its new value
const columnToUpdate = 'End Date';
const newValue = getCurrentDate(); // New value to update in the 'Device Status' column

// Function to filter, rename headers, and update column
function filterRenameAndUpdateColumns(row) {
    let filteredRow = {};
    Object.keys(row).forEach(column => {
        if (columnMappings[column] !== undefined) {
            filteredRow[columnMappings[column]] = row[column];
        }
    });

    // Update the specified column value
    if (columnMappings[columnToUpdate] !== undefined) {
        filteredRow[columnMappings[columnToUpdate]] = newValue;
    }

    return filteredRow;
}

// Array to store filtered, renamed, and updated rows
let filteredRows = [];

// Read input CSV file and filter, rename headers, and update specified column
fs.createReadStream(inputFile)
    .pipe(csv())
    .on('data', (row) => {
        let filteredRow = filterRenameAndUpdateColumns(row);
        filteredRows.push(filteredRow);
    })
    .on('end', () => {
        // Write the filtered, renamed, and updated rows to output CSV file
        const csvWriter = createCsvWriter({
            path: outputFile,
            header: Object.keys(columnMappings).map(column => ({ id: columnMappings[column], title: columnMappings[column] }))
        });

        csvWriter.writeRecords(filteredRows)
            .then(() => {
                console.log(`CSV file successfully written with specified columns renamed and ${columnToUpdate} column updated.`);
            })
            .catch((err) => {
                console.error('Error writing CSV file:', err);
            });
    })
    .on('error', (err) => {
        console.error('Error reading CSV file:', err);
    });